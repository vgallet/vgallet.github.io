
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>Tags on VGA</title>
   <link>https://vgallet.github.io/tags/</link>
   <description>Recent content in Tags on VGA</description>
   <generator>Hugo -- gohugo.io</generator>
   <language>en-us</language>
   <lastBuildDate>Sat, 09 May 2020 11:40:57 +0200</lastBuildDate>
   
       <atom:link href="https://vgallet.github.io/tags/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>Windows file explorer :: invalid ZIP file</title>
       <link>https://vgallet.github.io/posts/windows_file_explorer_invalid_zip_file/</link>
       <pubDate>Sun, 26 Jul 2020 11:18:16 +0200</pubDate>
       
       <guid>https://vgallet.github.io/posts/windows_file_explorer_invalid_zip_file/</guid>
       <description>&lt;h3 id=&#34;tldr&#34;&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;Windows file explorer sees a ZIP file as invalid if it contains at least one entry with a name greater than 260 characters.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I am working on a small Kotlin application and one of its features is to download a ZIP file built from a set of &lt;a href=&#34;https://junit.org/junit5/&#34;&gt;JUnit&lt;/a&gt; report files.&lt;/p&gt;
&lt;p&gt;Here’s an extract from the piece of code to do it&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; byteArrayOutputStream = ByteArrayOutputStream()

   &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; zipFile = ZipOutputStream(byteArrayOutputStream)

   zipFile.putNextEntry(file.name)
   zipFile.write(file.content)
   zipFile.closeEntry()
   zipFile.finish()
   zipFile.close()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It works pretty fine in most cases except on Windows and its file explorer. According to Windows file explorer, the compressed file is invalid.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vgallet.github.io/images/windows_file_explorer_zip_file.png&#34; alt=&#34;windows_popup_screenshot&#34;&gt;&lt;/p&gt;
&lt;p&gt;I tried to open the produced Zip file with some other tools like &lt;a href=&#34;https://www.win-rar.com/&#34;&gt;WinRAR&lt;/a&gt; and &lt;a href=&#34;https://www.7-zip.org/&#34;&gt;7zip&lt;/a&gt; and it works like a charm. Only Windows file explorer sees the ZIP file as invalid.&lt;/p&gt;
&lt;p&gt;My first attempt to resolve this problem was to specify ZIP file encoding.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; zipFile = ZipOutputStream(byteArrayOutputStream, StandardCharsets.UTF_8)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This charset is used to encode the entry names and comments. It did not fix the issue but it’s a good practice to specify the encoding.&lt;/p&gt;
&lt;p&gt;I spent some times looking for a solution and ended up with &lt;a href=&#34;https://superuser.com/questions/1437347/some-zip-archives-prompted-as-invalid-by-windofile%20name%20limitws-explorer-windows-10&#34;&gt;this post&lt;/a&gt;. Indeed, Windows API defines a maximum length for a path which is &lt;strong&gt;260 characters&lt;/strong&gt;
as you can see &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file#maximum-path-length-limitation&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Finally, I ensured that some file names in the ZIP file are longer than 260 characters, and I added a piece of code to shrink file name.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Covid19 Analysis</title>
       <link>https://vgallet.github.io/posts/covid19-analysis/</link>
       <pubDate>Sat, 09 May 2020 11:40:57 +0200</pubDate>
       
       <guid>https://vgallet.github.io/posts/covid19-analysis/</guid>
       <description>&lt;p&gt;The lockdown in France will end on Monday 11th  May 2020 and I wanted to take a snapshot of the situation in France using a statistical analysis. To do this analysis, I used the software &lt;a href=&#34;https://www.r-project.org/&#34;&gt;R&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The data used in this article come from this Github project: &lt;a href=&#34;https://github.com/opencovid19-fr/data/blob/master/README.en.md&#34;&gt;OpenCOVID19 France&lt;/a&gt;. A big thanks to all its contributors.
They aggregate data from the French Health Minister, Regional Health Agencies and Prefectures.
The data contains the number of people infected, cured, hospitalized, in resuscitation, and dead. All these numbers are split by region and department.&lt;/p&gt;
&lt;h2 id=&#34;situation-in-france&#34;&gt;Situation in France&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://vgallet.github.io/images/france_situation.png&#34; alt=&#34;France situation&#34;&gt;&lt;/p&gt;
&lt;p&gt;The lockdown has been established on 17th March 2020.&lt;/p&gt;
&lt;p&gt;On 8th May 2020, the situation in France is:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Case&lt;/th&gt;
&lt;th&gt;Number&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;confirmed&lt;/td&gt;
&lt;td&gt;138421&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dead&lt;/td&gt;
&lt;td&gt;16497&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;resuscitation&lt;/td&gt;
&lt;td&gt;2868&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hospitalized&lt;/td&gt;
&lt;td&gt;22724&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cured&lt;/td&gt;
&lt;td&gt;55782&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The number of dead people does not include people dead in nursing home nor at home.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vgallet.github.io/images/waffle.png&#34; alt=&#34;Waffle&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;evolution-per-region&#34;&gt;Evolution per Region&lt;/h2&gt;
&lt;h4 id=&#34;death-per-region&#34;&gt;Death per region&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://vgallet.github.io/images/death_region.png&#34; alt=&#34;Death per region&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;resuscitation-per-region&#34;&gt;Resuscitation per region&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://vgallet.github.io/images/resuscitation_region.png&#34; alt=&#34;Resuscitation per region&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;hospitalized-per-region&#34;&gt;Hospitalized per region&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://vgallet.github.io/images/hospitalized_region.png&#34; alt=&#34;Hospitalized per region&#34;&gt;&lt;/p&gt;
&lt;p&gt;The Paris region is the most heavily populated and so the most impacted by the virus.
As we can see from the graphs, the Paris region is followed by the region &amp;ldquo;Grand Est&amp;rdquo;, one of the epidemic focuses.&lt;/p&gt;
&lt;h2 id=&#34;situation-per-department&#34;&gt;Situation per department&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://vgallet.github.io/images/death_department.png&#34; alt=&#34;Death per department&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vgallet.github.io/images/hospitalized_department.png&#34; alt=&#34;Hospitalized per department&#34;&gt;&lt;/p&gt;
&lt;p&gt;By comparing those two France maps, we can see that the most infected and impacted area are located in the North and in the East.&lt;/p&gt;
&lt;p&gt;One interesting graphic published by French government is the occupancy rate of resuscitation beds per department.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vgallet.github.io/images/2020-05-08_10-15.png&#34; alt=&#34;Governement bed occupancy&#34;&gt;&lt;/p&gt;
&lt;p&gt;I tried to do the same but I only found &lt;a href=&#34;https://drees.solidarites-sante.gouv.fr/etudes-et-statistiques/publications/article/nombre-de-lits-de-reanimation-de-soins-intensifs-et-de-soins-continus-en-france&#34;&gt;the numbers of resuscitation bed in 2018&lt;/a&gt;. With those numbers, the resulting map is more “green”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vgallet.github.io/images/bed_occupancy.png&#34; alt=&#34;Bed occupancy&#34;&gt;&lt;/p&gt;
&lt;p&gt;One can assume that the number of beds has been reduced since 2018.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Workshop Azure Pipelines</title>
       <link>https://vgallet.github.io/posts/workshop-azure-pipelines/</link>
       <pubDate>Wed, 29 Apr 2020 15:30:27 +0200</pubDate>
       
       <guid>https://vgallet.github.io/posts/workshop-azure-pipelines/</guid>
       <description>&lt;p&gt;&lt;img src=&#34;https://vgallet.github.io/images/2iwn62ny1ufh9050weo4.jpg&#34; alt=&#34;dam&#34;&gt;&lt;/p&gt;
&lt;p&gt;I have been working with &lt;a href=&#34;https://azure.microsoft.com/fr-fr/services/devops/pipelines/&#34;&gt;Azure Pipelines&lt;/a&gt; for some time and I would like to introduce it to you. Instead of describing it into a blog post, I made an online workshop to manipulate it.&lt;/p&gt;
&lt;p&gt;During this workshop, you will learn how to set up a CI pipeline to build a Maven / Java application and a NodeJs application. You will also discover Azure Pipelines features, such as pipeline caching, variables, parameters, and templating.
If you would like to take this workshop, all you need is a Github account.&lt;/p&gt;
&lt;p&gt;Please feel free to send me feedback here on the comment section or by creating a Github issue to &lt;a href=&#34;https://github.com/vgallet/workshop-azure-pipelines&#34;&gt;the project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here&#39;s the link &lt;a href=&#34;https://workshop-azure-pipelines.netlify.app/&#34;&gt;https://workshop-azure-pipelines.netlify.app/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Add chaos in your network!</title>
       <link>https://vgallet.github.io/posts/network-chaos/</link>
       <pubDate>Wed, 11 Dec 2019 20:24:33 +0100</pubDate>
       
       <guid>https://vgallet.github.io/posts/network-chaos/</guid>
       <description>&lt;p&gt;&lt;img src=&#34;https://vgallet.github.io/images/photo-1509390874189-d75fd22f19f7.jpeg&#34; alt=&#34;dam&#34;&gt;
&lt;em&gt;Photo by American Public Power Association on Unsplash&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;One of important rule in production is to never trust your network! There will always be problems and Netflix has clearly understood this statement by creating &lt;a href=&#34;https://en.wikipedia.org/wiki/Chaos_engineering#Chaos_Monkey&#34;&gt;Chaos Monkey&lt;/a&gt; in 2011.
In this article, we will focus on chaos in the network. For example to assert that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an application is resilient to network latency&lt;/li&gt;
&lt;li&gt;a website still offers a comfortable experience despite a limited bandwidth&lt;/li&gt;
&lt;li&gt;a distributed system cannot go into split-brain.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;tc&lt;/code&gt; is a Linux command to manage network traffic. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tc qdisc add dev eth0 root netem delay 200ms
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This command add 200 milliseconds latency on the network of eth0 interface. Let’s dissect it.&lt;/p&gt;
&lt;p&gt;As quoted from &lt;a href=&#34;http://man7.org/linux/man-pages/man8/tc.8.html&#34;&gt;linux man page&lt;/a&gt;, &lt;code&gt;qdisc&lt;/code&gt; is&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;short for &amp;lsquo;queueing discipline&amp;rsquo; and it is elementary to understanding traffic control.
Whenever the kernel needs to send a packet to an interface, it is enqueued to the qdisc configured for that interface.
Immediately afterwards, the kernel tries to get as many packets as possible from the qdisc, for giving them to the network adaptor driver.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;add&lt;/code&gt; is to add a new rule.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dev eth0&lt;/code&gt; means the rule is applied to the device, the network interface eth0.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;root&lt;/code&gt; is the class attached to the network packet. In this case, the rule is applied to all packets.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;netem&lt;/code&gt; means Network Emulator. It’s the tool to add a behaviour.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;delay 200ms&lt;/code&gt; is the rule to apply. Here it’s a 200 milliseconds latency.&lt;/p&gt;
&lt;p&gt;Once the rule is applied, we can list all the rules applied to eth0.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tc qdisc show dev eth0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And to delete it&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tc qdisc del dev eth0 root
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the first example, the latency impact the whole network, including a ssh connection. In order to not impact all the network but only a port, an IP or a range of IP, it’s possible to use the class concept of qdisc.
By default, a qdisc is divided in 3 bands: 0, 1 et 2. This command helps to see these bands:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tc qdisc ls

qdisc noqueue 0: dev lo root refcnt 2 
qdisc pfifo_fast 0: dev eth0 root refcnt 2 bands 3 priomap  1 2 2 2 1 2 0 0 1 1 1 1 1 1 1 1
qdisc pfifo_fast 0: dev eth1 root refcnt 2 bands 3 priomap  1 2 2 2 1 2 0 0 1 1 1 1 1 1 1 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;On my computer, eth0 has 3 bands with a priority map of &lt;code&gt;1 2 2 2 1 2 0 0 1 1 1 1 1 1 1 1&lt;/code&gt;.
The band used is determined by network packet &lt;a href=&#34;https://en.wikipedia.org/wiki/Type_of_service&#34;&gt;TOS&lt;/a&gt;. TOS stands for Type Of Service. This is simply four bits indicating the type of priority.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Binary Decimal  Meaning
-----------------------------------------
1000   8         Minimize delay (md)
0100   4         Maximize throughput (mt)
0010   2         Maximize reliability (mr)
0001   1         Minimize monetary cost (mmc)
0000   0         Normal Service
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here’s the table used to determine the band. There is more explanation of how it works directly on &lt;a href=&#34;https://www.systutorials.com/docs/linux/man/8-tc-prio/&#34;&gt;the man page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First of all, a rule is added to change the priority map. All the traffic will go to the first band.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tc qdisc add dev eth0 root handle 1: prio priomap 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, this rule defines the behaviour added but only on the third band. Here it’s a delay of 1000 milliseconds.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tc qdisc add dev eth0 parent 1:2 handle 20: netem delay 1000ms
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, a filter is applied to redirect all the traffic matching a destination IP to the third band. To ensure it works correctly, a simple ping to that IP does the trick.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tc filter add dev eth0 parent 1:0 protocol ip u32 match ip dst &amp;lt;mon ip&amp;gt; flowid 1:2
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;64 bytes from &amp;lt;server&amp;gt; (&amp;lt;mon ip&amp;gt;): icmp_seq=143 ttl=62 time=1000 ms
64 bytes from &amp;lt;server&amp;gt; (&amp;lt;mon ip&amp;gt;): icmp_seq=144 ttl=62 time=1000 ms
64 bytes from &amp;lt;server&amp;gt; (&amp;lt;mon ip&amp;gt;): icmp_seq=145 ttl=62 time=1000 ms
64 bytes from &amp;lt;server&amp;gt; (&amp;lt;mon ip&amp;gt;): icmp_seq=146 ttl=62 time=1000 ms
64 bytes from &amp;lt;server&amp;gt; (&amp;lt;mon ip&amp;gt;): icmp_seq=147 ttl=62 time=1001 ms
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The rule is correctly applied. Here it’s using a filter on an IP but it works with a subnet mask and/or a port. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tc filter add dev eth0 protocol ip parent 1:0 prio 1 u32 match ip dst &amp;lt;mon IP&amp;gt; match ip dport &amp;lt;mon port&amp;gt; 0xffff flowid 1:2
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;other-options&#34;&gt;Other options&lt;/h3&gt;
&lt;p&gt;Here some other possibilities.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;netem delay 100ms 10ms
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;this rule adds 100 milliseconds of delay plus or less 10 milliseconds in an uniform disribution.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;netem loss 10%
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;10% of packets are loss.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;netem duplicate 50%
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;50% of packets are duplicated&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;netem corrupt 5%
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5% of packets are corrupt.&lt;/p&gt;
&lt;h3 id=&#34;limit-bandwidth&#34;&gt;Limit bandwidth&lt;/h3&gt;
&lt;p&gt;Finally, the tool Token Bucket Filter (TBF) enables to limit the &lt;strong&gt;outgoing&lt;/strong&gt; bandwidth.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tbf rate 20kbit buffer 1600 limit 3000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The outgoing bandwidth is limited to 20 kilobits.&lt;/p&gt;
&lt;p&gt;A big thanks to Marc Barret for his time and proofreading.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>PostgreSQL Replication</title>
       <link>https://vgallet.github.io/posts/postgresql-replication/</link>
       <pubDate>Sat, 07 Dec 2019 09:48:01 +0100</pubDate>
       
       <guid>https://vgallet.github.io/posts/postgresql-replication/</guid>
       <description>&lt;p&gt;There are plenty of tutorials available online, which give step-by-step instructions to manage the replication of PostgreSQL clusters with Repmgr. Once the setup is complete, what is important to look for? How does your client handle failover? How to deal with a failed or unreachable standby node? How to reintegrate a failed or unreachable standby node? How do you monitor your cluster?&lt;/p&gt;
&lt;h2 id=&#34;client-failover&#34;&gt;Client Failover&lt;/h2&gt;
&lt;p&gt;When your primary node goes down and a standby is promoted. How do you let your clients handle this change?&lt;/p&gt;
&lt;h3 id=&#34;official-driver&#34;&gt;Official driver&lt;/h3&gt;
&lt;p&gt;A simple solution is to use official driver capabilities. As mentioned in the &lt;a href=&#34;https://jdbc.postgresql.org/documentation/head/connect.html&#34;&gt;documentation&lt;/a&gt;, you can list all nodes in your cluster and the connection will be established only on the primary node.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jdbc:postgresql://primary,standby1,standby2/database?targetServerType=master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this situation, the primary node will handle all the read and write queries. However, it’s possible to create a second connection dedicated to read queries on standby nodes.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jdbc:postgresql://primary,standby1,standby2/database?targetServerType=preferSlave
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;handmade-solution&#34;&gt;Handmade solution&lt;/h3&gt;
&lt;p&gt;It’s possible to create your own solution to enable connection failover. For example in &lt;a href=&#34;https://www.percona.com/blog/2019/10/31/postgresql-application-connection-failover-using-haproxy-with-xinetd/&#34;&gt;this article&lt;/a&gt;, a shell script is used to check PostgreSQL status and HAProxy is used to perform failover.&lt;/p&gt;
&lt;h2 id=&#34;repmgrd&#34;&gt;Repmgrd&lt;/h2&gt;
&lt;p&gt;Repmgrd is the Repmgr daemon. It monitors the PostgreSQL cluster and performs necessary actions based on the state of the cluster. It performs automatic failover in the case that the primary node goes down by promoting the most eligible standby as the new primary.&lt;/p&gt;
&lt;p&gt;Repmgrd is a critical process that should be running at all times. The failover mechanism would not be able to kick in if it were to stop working.
Therefore, it is highly recommended to enable “auto restart” by overriding the provided daemon’s configuration file with systemd.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.include /lib/systemd/system/repmgr.service
[Service]
Restart=always
RestartSec=10
StartLimitInterval=60
StartLimitBurst=3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With this configuration, the daemon will be restarted in case of failure after a timeout of 10 seconds. It will try 3 times during an interval of 60 seconds. In any case, if Repmgr daemon is going down, it means there is a problem with the service or on the server and simply restarting the service may not fix the issue.&lt;/p&gt;
&lt;h3 id=&#34;promotion&#34;&gt;Promotion&lt;/h3&gt;
&lt;p&gt;Promoting a new primary is one of the most important actions during a failover situation. Repmgr knows when by doing reconnect attempts. Depending on the quality of your network, you may need to avoid promotion caused by network latency by modifying &lt;code&gt;reconect_attempts&lt;/code&gt; and &lt;code&gt;reconnect_interval&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Number of attempts which will be made to reconnect to an unreachable primary (or other upstream node)
reconnect_attempts=6                                                          

# Interval between attempts to reconnect to an unreachable primary (or other upstream node)
reconnect_interval=10
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With this configuration, a total of 6 attempts will be made with 10 seconds between attempts before promoting a new primary using &lt;code&gt;promote_command&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As you can see from the &lt;a href=&#34;https://repmgr.org/docs/repmgr.html&#34;&gt;documentation&lt;/a&gt;, &lt;code&gt;promote_command&lt;/code&gt; in Repmgr configuration is used in a failover situation to promote a new primary. Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;promote_command=&#39;/usr/bin/repmgr standby promote -f /etc/repmgr.conf --log-to-file&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In fact, in the case of a failover situation, something wrong is happening so it may be a good action to perform a backup in addition to promotion. For example, this command will perform a backup using pgbackrest.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;promote_command=&#39;/usr/bin/repmgr standby promote -f /etc/repmgr.conf --log-to-file &amp;amp;&amp;amp; sleep 120 &amp;amp;&amp;amp; pgbackrest --stanza=my_stanza --type=full backup&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;monitoring&#34;&gt;Monitoring&lt;/h3&gt;
&lt;p&gt;PostgreSQL Replication statistics are available on current primary. An overall vision can be seen on primary node by executing:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select * from pg_stat_replication;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;pg_stat_replication&lt;/code&gt; contains statistics about each WAL sender process connected to a standby process.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-[ RECORD 1 ]----+----------------------------------------------
pid              | 11881
usesysid         | 16388
usename          | repmgr
application_name | &amp;lt;application_name&amp;gt;
client_addr      | &amp;lt;ip&amp;gt;
client_hostname  | 
client_port      | 58212
backend_start    | 2019-11-12 16:52:04.51763+01
backend_xmin     | 
state            | streaming
sent_lsn         | 138/6C000000
write_lsn        | 138/6C000000
flush_lsn        | 138/6C000000
replay_lsn       | 138/6C000000
write_lag        | 
flush_lag        | 00:00:00.29105
replay_lag       | 
sync_priority    | 0
sync_state       | async
-[ RECORD 2 ]----+----------------------------------------------
pid              | 11879
usesysid         | 16388
usename          | repmgr
application_name | &amp;lt;application_name&amp;gt;
client_addr      | &amp;lt;ip&amp;gt;
client_hostname  | 
client_port      | 35170
backend_start    | 2019-11-12 16:52:03.053909+01
backend_xmin     | 
state            | streaming
sent_lsn         | 138/6C000000
write_lsn        | 138/6C000000
flush_lsn        | 138/6C000000
replay_lsn       | 138/6C000000
write_lag        | 
flush_lag        | 00:00:00.268068
replay_lag       | 
sync_priority    | 0
sync_state       | async
-[ RECORD 3 ]----+----------------------------------------------
pid              | 5201
usesysid         | 16388
usename          | repmgr
application_name | &amp;lt;application_name&amp;gt;
client_addr      | &amp;lt;ip&amp;gt;
client_hostname  | 
client_port      | 52130
backend_start    | 2019-11-08 16:22:01.688119+01
backend_xmin     | 
state            | streaming
sent_lsn         | 138/6C000000
write_lsn        | 138/6C000000
flush_lsn        | 138/6C000000
replay_lsn       | 138/6C000000
write_lag        | 
flush_lag        | 00:00:00.23605
replay_lag       | 
sync_priority    | 0
sync_state       | async
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;First of all, &lt;code&gt;sync_state&lt;/code&gt; column indicates what type of replication used. In this example, the value &lt;code&gt;async&lt;/code&gt; only shows that is an asynchronous replication and it’s definitely not a problem as I have seen explained in some articles. When you setup a replication cluster, you had to choose between asynchronous and synchronous replication.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;postgresql.conf&lt;/code&gt; file, it’s possible to specify a list of standby servers to &lt;a href=&#34;https://www.postgresql.org/docs/current/warm-standby.html#SYNCHRONOUS-REPLICATION&#34;&gt;support synchronous replication&lt;/a&gt; with &lt;code&gt;synchronous_standby_names&lt;/code&gt;. It means that transactions will commit only after standby synchronous servers confirm receipt of the data.&lt;/p&gt;
&lt;p&gt;What is important to look is &lt;code&gt;state&lt;/code&gt; column. Value &lt;code&gt;streaming&lt;/code&gt; indicates the WAL sender is streaming changes to its connected standby server. Then, an important health indicator is the amount of WAL records generated the primary node, but not yet applied by standby server: streaming lag.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sent_lsn&lt;/code&gt; shows the last WAL sent on WAL sender connection. LSN stands for Log Sequence Number and it’s a position in the Write-Ahead Log stream. Thus, an important gap between current WAL and &lt;code&gt;sent_lsn&lt;/code&gt; may indicate that primary server is under heavy load. We can get current WAL by using &lt;code&gt;pg_current_wal_lsn&lt;/code&gt; function and &lt;code&gt;pg_wal_lsn_diff&lt;/code&gt; to compute the difference.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select (pg_wal_lsn_diff(pg_current_wal_lsn(),sent_lsn)) as primary_streaming_lag FROM pg_stat_replication;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The result is in bytes.&lt;/p&gt;
&lt;p&gt;The view &lt;code&gt;pg_stat_replication&lt;/code&gt; provides also the last WAL position written, flushed and replayed on standby database. This way, we can have the standby total streaming lag by executing this query for each standby node :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select (pg_wal_lsn_diff(pg_current_wal_lsn(),replay_lsn)) as standby_streaming_lag FROM pg_stat_replication;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;select application_name,
pg_current_wal_lsn() as current_WAL_lsn,
sent_lsn as last_sent_WAL,
replay_lsn last_replay_WAL,
(pg_wal_lsn_diff(pg_current_wal_lsn(),sent_lsn))::int / 1024 as primary_streaming_lag,
(pg_wal_lsn_diff(pg_current_wal_lsn(),replay_lsn))::int / 1024 as standby_streaming_lag
FROM pg_stat_replication;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let’s check this query by adding some network latency&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tc qdisc add dev eth0 root handle 1: prio priomap 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
tc qdisc add dev eth0 parent 1:2 handle 20: netem delay 1000ms
tc filter add dev eth0 parent 1:0 protocol ip u32 match ip dst &amp;lt;ip mask&amp;gt; flowid 1:2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This command adds a delay of 1 second for nodes that match a specific IP range.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select application_name,
pg_current_wal_lsn() as current_WAL_lsn,
sent_lsn as last_sent_WAL,
replay_lsn last_replay_WAL,
(pg_wal_lsn_diff(pg_current_wal_lsn(),sent_lsn))::int / 1024 as primary_streaming_lag,
(pg_wal_lsn_diff(pg_current_wal_lsn(),replay_lsn))::int / 1024 as standby_streaming_lag
FROM pg_stat_replication;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;-[ RECORD 1 ]---------+----------------------------------------------
application_name      | &amp;lt;application_name&amp;gt;
current_wal_lsn       | 138/7D054AF8
last_sent_wal         | 138/7D054AF8
last_replay_wal       | 138/7D054AF8
primary_streaming_lag | 0
standby_streaming_lag | 0
-[ RECORD 2 ]---------+----------------------------------------------
application_name      | &amp;lt;application_name&amp;gt;
current_wal_lsn       | 138/7D054AF8
last_sent_wal         | 138/7D054AF8
last_replay_wal       | 138/7D000000
primary_streaming_lag | 0
standby_streaming_lag | 338
-[ RECORD 3 ]---------+----------------------------------------------
application_name      | &amp;lt;application_name&amp;gt;
current_wal_lsn       | 138/7D054AF8
last_sent_wal         | 138/7D054AF8
last_replay_wal       | 138/7D000000
primary_streaming_lag | 0
standby_streaming_lag | 338
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;primary_streaming_lag&lt;/code&gt; and  &lt;code&gt;standby_streaming_lag&lt;/code&gt; values are in KB as it’s divided by 1024. This is nice but it’s only available on primary node. If we are experiencing lag on a standby node, it can mean that this node is under heavy load or network latency. It’s important to monitor replication directly on standby nodes. And so, Repmgr has its own table to monitor replication.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select * from repmgr.replication_status;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;-[ RECORD 1 ]-------------+----------------------------------------------
primary_node_id           | 1
standby_node_id           | 3
standby_name              | &amp;lt;application_name&amp;gt;
node_type                 | standby
active                    | t
last_monitor_time         | 2019-11-22 11:07:51.673005+01
last_wal_primary_location | 143/4C009390
last_wal_standby_location | 143/4C009390
replication_lag           | 0 bytes
replication_time_lag      | 00:00:00
apply_lag                 | 0 bytes
communication_time_lag    | 00:00:00.960348
-[ RECORD 2 ]-------------+----------------------------------------------
primary_node_id           | 1
standby_node_id           | 4
standby_name              | &amp;lt;application_name&amp;gt;
node_type                 | standby
active                    | t
last_monitor_time         | 2019-11-22 11:07:51.100838+01
last_wal_primary_location | 143/4C0091D0
last_wal_standby_location | 143/4C0091D0
replication_lag           | 0 bytes
replication_time_lag      | 00:00:00
apply_lag                 | 0 bytes
communication_time_lag    | 00:00:01.532515
-[ RECORD 3 ]-------------+----------------------------------------------
primary_node_id           | 1
standby_node_id           | 2
standby_name              | &amp;lt;application_name&amp;gt;
node_type                 | standby
active                    | t
last_monitor_time         | 2019-11-22 11:07:51.310996+01
last_wal_primary_location | 143/4C0092B0
last_wal_standby_location | 143/4C0092B0
replication_lag           | 0 bytes
replication_time_lag      | 00:00:00
apply_lag                 | 0 bytes
communication_time_lag    | 00:00:01.322357
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This view is created and available on each node, primary and standby. You can check how this view is built on &lt;a href=&#34;https://github.com/2ndQuadrant/repmgr/blob/master/repmgr--4.4.sql&#34;&gt;Repmgr Github&lt;/a&gt;, depends your Repmgr version.&lt;/p&gt;
&lt;p&gt;Furthermore, Repmgr offers a check service by node.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/usr/bin/repmgr -f /etc/repmgr.conf node check
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;Node &amp;quot;&amp;lt;application_name&amp;gt;&amp;quot;:
	Server role: OK (node is standby)
	Replication lag: OK (0 seconds)
	WAL archiving: OK (10 pending archive ready files)
	Downstream servers: OK (this node has no downstream nodes)
	Replication slots: OK (node has no physical replication slots)
	Missing physical replication slots: OK (node has no missing physical replication slots)
	Configured data directory: OK (configured &amp;quot;data_directory&amp;quot; is &amp;quot;&amp;lt;data_directory&amp;gt;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Replication lag checks if the node is lagging by more than &lt;code&gt;replication_lag_warning&lt;/code&gt; and &lt;code&gt;replication_lag_critical&lt;/code&gt; parameters. By default, it’s 300 and 600 ms.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;A big thanks to &lt;a href=&#34;https://twitter.com/Karenhjex&#34;&gt;Karen&lt;/a&gt; and &lt;a href=&#34;&#34;&gt;Marc Barret&lt;/a&gt; for their time and proofreading.&lt;/p&gt;
&lt;p&gt;Photo by Jan Kolar / VUI Designer on Unsplash&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>How to see and limit memory consumption of an application ?</title>
       <link>https://vgallet.github.io/posts/limit-memory-consumption/</link>
       <pubDate>Sat, 30 Nov 2019 20:23:38 +0100</pubDate>
       
       <guid>https://vgallet.github.io/posts/limit-memory-consumption/</guid>
       <description>&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Originally published at &lt;a href=&#34;https://dev.to/vga/how-to-see-and-limit-memory-consumption-of-an-application-5bfl&#34;&gt;dev.to&lt;/a&gt; on Oct, 2019&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;For a few months, my computer experienced some freezing during several minutes and the only solution to return to work was a reboot. It’s really annoying so I decided to look at what’s going on.
I have been working since three years on a laptop DELL E7450. It has 8GB RAM size and an Intel i5 core with 2 cores and 4 logical processors. It is quite enough to work with, isn’t it ?
I’m using Ubuntu 18.04 coupled with &lt;a href=&#34;https://i3wm.org/&#34;&gt;i3&lt;/a&gt; for my window manager. By the way, if you don’t know yet about i3, you have to take a look at it.
I noticed that with only 2 open applications : Google Chrome and Slack, both used most of my memory. Google Chrome is well known to use a lot of RAM and Slack application is built upon Electron and bad news: &lt;a href=&#34;https://josephg.com/blog/electron-is-flash-for-the-desktop/&#34;&gt;Electron is a known resource hog&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;memory-usage&#34;&gt;Memory Usage&lt;/h2&gt;
&lt;p&gt;I’ve made some simple tests to check memory consumption. As you can see from this picture, only 2 open applications use nearly 100% of my memory.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://thepracticaldev.s3.amazonaws.com/i/qw19uyfnnqcuizz0u3dy.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;This picture is extracted from a screenshot of the htop program. Htop is a great alternative to top. It provides facilities to filter, sort, search and view per core. The thing that interested me here is the memory, especially memory per process. To do that, i’m using &lt;a href=&#34;https://manpages.ubuntu.com/manpages/precise/en/man8/smem.8.html&#34;&gt;smem&lt;/a&gt;, a tool that calculates the USS, PSS and RSS per process.&lt;/p&gt;
&lt;p&gt;USS stands for Unique Set Size. This is the amount of unshared memory unique to that process. It does not include shared memory. In the other hand, PSS stands for Proportional Set Size. It adds together the unique memory (USS), along with a proportion of its shared memory divided by the number of processes sharing that memory. It gives a  representation of how much actual physical memory is being used per process - with shared memory truly represented as shared.&lt;/p&gt;
&lt;p&gt;RSS stands for Resident Set Size. This is the amount of shared memory plus unshared memory used by each process. If any process shares memory, this will over-report the amount of memory actually used, because the same shared memory will be counted more than once - appearing again in each other process that shares the same memory. This metric can be unreliable, especially when processes have a lot of forks.&lt;/p&gt;
&lt;p&gt;Here the command I used :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;smem -n -s pss -t -k -P chrome
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you&#39;re not familiar with command line, you can use &lt;a href=&#34;https://explainshell.com/explain?cmd=smem+-n+-s+pss+-t+-k+-P+chrome&#34;&gt;explainshell.com&lt;/a&gt;, a great website to dissect commands.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://thepracticaldev.s3.amazonaws.com/i/vvhhnxld1oqrlprfzexz.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;To sum up, 57 processes match ‘chrome’ and used 4,9G of USS, 5.0G of PSS and 7,7G of RSS.&lt;/p&gt;
&lt;p&gt;Let’s focus on Slack memory consumption:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://thepracticaldev.s3.amazonaws.com/i/hfmbfsvghammh1ua6taj.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;memory-limitation&#34;&gt;Memory Limitation&lt;/h2&gt;
&lt;p&gt;Let’s say I want to limit the memory allocated to the Slack application. My first thought was to use Docker. By wrapping the application in a Docker container, I can use Docker abilities to &lt;a href=&#34;https://docs.docker.com/config/containers/resource_constraints/&#34;&gt;limit the resources of a container&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run --memory=1G ….
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This parameter will set the maximum amount of memory the container can use. It works, but it means I need to create a Docker image dedicated to all applications I want to limit the amount of memory.
In fact, Docker uses a technology called &lt;code&gt;namespaces&lt;/code&gt; to isolate containers from other processes. To learn more about Docker architecture, you can take a look at &lt;a href=&#34;https://docs.docker.com/engine/docker-overview/&#34;&gt;Docker overview page&lt;/a&gt;. One namespace is interesting in my case : Control groups also known as cgroups. This one enables the limitation of physical resources.&lt;/p&gt;
&lt;p&gt;Let’s use it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Create a group for memory named “slack_group”
cgcreate -g &amp;quot;memory:slack_group&amp;quot; -t victor:victor

# Specify memory limit to 1G for this group
cgset -r memory.limit_in_bytes=1G &amp;quot;slack_group&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To ensure memory limitation is correctly applied, it’s possible to look in directory &lt;code&gt;/sys/fs/cgroup/memory/mygroup/&lt;/code&gt; and precisely at file &lt;code&gt;memory.limit_in_bytes&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Launch slack application in this group
cgexec -g &amp;quot;memory:slack_group&amp;quot; slack

# If needed, we can remove the group
cgdelete &amp;quot;memory:slack_group&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In my case, I use cgroups only to limit memory allocated but it’s also possible to limit CPU.&lt;/p&gt;
&lt;p&gt;Then, let’s see if it’s works.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://thepracticaldev.s3.amazonaws.com/i/gaeargdokd9tq71wvdgy.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you can see, PSS is strictly equal to 1G but the swap has now increased to 500M. The application is a bit slow, changing from one workspace to another is a bit long but it’s still comfortable to use.
Let’s disable swap to see if it works.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo 0 &amp;gt; /sys/fs/cgroup/memory/slack_group/memory.swappiness
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Guess what ? It doesn’t work, the application is not responding and some processes are killed. In fact, it’s the OOM Killer (Out-of-memory Killer) who is in charge to kill processes in order to free up memory for the system. The OOM Killer selects the best candidate for elimination from a score maintained by the kernel. You can see this score in:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/proc/${PID}/oom_score
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;automation&#34;&gt;Automation&lt;/h2&gt;
&lt;p&gt;I know how to limit memory consumption for one application but it’s definitely not sustainable in the future. I will have to create a group per each application I want to limit memory usage. Thanks to this &lt;a href=&#34;https://unix.stackexchange.com/a/279175/363256&#34;&gt;StackExchange question&lt;/a&gt;, I found a script that does the job. It’s available here:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/vgallet/c169d2e3aa754a869747967cdce32515.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This script creates a group each time it’s launched and remove it when it’s killed.
Easy to use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;limitmem.sh 1G slack
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That’s fine but this script is a piece of code that I will have to maintain, update, upgrade, etc….&lt;/p&gt;
&lt;p&gt;Another way to integrate memory limit to my system is to use systemd.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;systemd is a Linux initialization system and service manager that includes features like on-demand starting of daemons, mount and automount point maintenance, snapshot support, and processes tracking using Linux control groups. systemd provides a logging daemon and other tools and utilities to help with common system administration tasks. &lt;a href=&#34;https://www.linode.com/docs/quick-answers/linux-essentials/what-is-systemd/&#34;&gt;Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To do this, I have to wrap my application into a systemd service.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Unit]
Description=slack
After=network.target 

[Service]
User=victor
Group=victor
Environment=DISPLAY=:0
ExecStart=/usr/bin/slack
#Restart=on-failure
KillMode=process
MemoryAccounting=true
MemoryMax=1G

[Install]
WantedBy=multi-user.target 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By specifing paramaters &lt;code&gt;MemoryAccounting&lt;/code&gt; and &lt;code&gt;MemoryMax&lt;/code&gt;, I’m able to limit memory allocated. As explained in systemd documentation, systemd organizes processes with cgroups. In my opinion, using systemd is far more sustainable than maintaining a custom shell script as it’s became the standard for most Linux distributions.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As I was writing this article, slack engineering published an &lt;a href=&#34;https://slack.engineering/rebuilding-slack-on-the-desktop-308d6fe94ae4&#34;&gt;article&lt;/a&gt; announcing a new Slack desktop application and I quote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One of our primary metrics has been memory usage&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://thepracticaldev.s3.amazonaws.com/i/mx4dpk9qtum71mkh3ycm.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;To be clear, my goal was not to prove how bad memory management is of Slack application. I simply wanted to go deeper in memory management for the operating system I use. I used slack application here like I could have used any other.&lt;/p&gt;
&lt;p&gt;By the way, all of this makes me think: do I have to let a messaging application consumes 30% of my memory? More generally, do I have to let any application manages it own memory consumption? Could the concept of container (an application in an isolated environment) be applied to my everyday applications?&lt;/p&gt;
&lt;p&gt;Don’t hesitate to tell me if I forgot a way to limit memory consumption and let me know what you think about it.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href=&#34;https://twitter.com/saby_nastasia&#34;&gt;Nastasia&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/_mcorbin&#34;&gt;Mathieu&lt;/a&gt; for their time and proofreading.&lt;/p&gt;
&lt;p&gt;Cover photo by &lt;a href=&#34;https://unsplash.com/@hbtography&#34;&gt;Harrison Broadbent on Unsplash&lt;/a&gt;&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Dockerize your integration tests</title>
       <link>https://vgallet.github.io/posts/dockerize-tests/</link>
       <pubDate>Sat, 30 Nov 2019 20:11:44 +0100</pubDate>
       
       <guid>https://vgallet.github.io/posts/dockerize-tests/</guid>
       <description>&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Originally published at &lt;a href=&#34;https://dev.to/vga/dockerize-your-integration-tests--4edm&#34;&gt;dev.to&lt;/a&gt; on Jan 4, 2019&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Most of our applications have to talk to a database, a HTTP API, a message broker, a SMTP server, etc… And it&#39;s quite complicated to set up a real test environment with those components.&lt;/p&gt;
&lt;p&gt;In some cases, we can simply mock those components or have an in-memory one during test execution. For example, &lt;a href=&#34;http://www.h2database.com/html/main.html&#34;&gt;H2&lt;/a&gt; ou &lt;a href=&#34;http://hsqldb.org/&#34;&gt;HSQLDB&lt;/a&gt; are in-memory databases well-known for being used during integration tests. However, they are not the one used in production environment and our tests can seem unrepresentative.
Today, it&#39;s possible to use all the power of Docker and set up a connected test environment easily thanks to &lt;a href=&#34;https://www.testcontainers.org/&#34;&gt;Testcontainers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://rnorth.org/public/testcontainers/logo.png&#34; alt=&#34;testcontainers logo&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;testcontainers&#34;&gt;Testcontainers&lt;/h2&gt;
&lt;p&gt;Testcontainers allows us to easily manipulate Docker containers during test execution. It uses the Docker client &lt;a href=&#34;https://github.com/docker-java/docker-java&#34;&gt;docker-java&lt;/a&gt; to communicate with Docker daemon. It works with most operating systems and environments and despite the best-efforts support for Windows, I use it on a daily basis with Docker Toolbox. You can find the matrix compatibility &lt;a href=&#34;https://www.testcontainers.org/compatibility.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When you create a container, Testcontainers will try to connect to the Docker daemon by using &lt;code&gt;DOCKER_HOST&lt;/code&gt;, &lt;code&gt;DOCKER_TLS_VERIFY&lt;/code&gt; and &lt;code&gt;DOCKER_CERT_PATH&lt;/code&gt; variables. These environment variables can be easily overridden in the JVM for example.&lt;/p&gt;
&lt;h3 id=&#34;create-a-container&#34;&gt;Create a container&lt;/h3&gt;
&lt;p&gt;Containers are represented with the object &lt;em&gt;GenericContainer&lt;/em&gt;. It&#39;s possible to create a container from an image, a Dockerfile or from a Dockerfile created on the fly. In addition, it&#39;s possible to create containers from a &lt;a href=&#34;https://www.testcontainers.org/usage/docker_compose.html&#34;&gt;Docker Compose file&lt;/a&gt;.
For instance, this is an Elasticsearch server created from the image &lt;a href=&#34;https://hub.docker.com/_/elasticsearch/&#34;&gt;docker.elastic.co/elasticsearch/elasticsearch:6.1.1&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;GenericContainer container &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; GenericContainer&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;docker.elastic.co/elasticsearch/elasticsearch:6.1.1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;withEnv&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;discovery.type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;single-node&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;withExposedPorts&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;9200&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;waitingFor&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
      Wait
       &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;forHttp&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/_cat/health?v&amp;amp;pretty&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
       &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;forStatusCode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;200&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see that it&#39;s fairly easy to provide environment variables to the container with the method &lt;code&gt;withEnv&lt;/code&gt;. In this case, it&#39;s the variable &lt;em&gt;discovery.type&lt;/em&gt; with value &lt;em&gt;single-node&lt;/em&gt;.
Next, we make sure that our container is up by making an HTTP call on &lt;code&gt;/_cat/health&lt;/code&gt; API and having a 200 code response. There are also other strategies to assert a container is running:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wait.forLogMessage waits for a log message,&lt;/li&gt;
&lt;li&gt;Wait.forListeningPort waits for a listening port&lt;/li&gt;
&lt;li&gt;Wait.forHealthcheck enables to use &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/#healthcheck&#34;&gt;HEALTHCHECK&lt;/a&gt; feature from docker.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To finalize the container configuration, our container is exposing internal port 9200 and this is explicitly set with the method &lt;code&gt;withExposedPorts&lt;/code&gt;. It means that Testcontainers will map this container&#39;s port to a random port. It&#39;s possible to retrieve mapped port with the method &lt;code&gt;getMappedPort&lt;/code&gt;otherwise we can define port bindings with the method &lt;code&gt;setPortBindings&lt;/code&gt;. Here, we expose the port 9200 from our container to port 9200:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;container&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setPortBindings&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Arrays&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;asList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;9200:9200&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&#39;s it! Our Elasticsearch server is ready to be used. To start it up, we simply have to execute the start method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;container&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At startup, Testcontainers will run a bunch of checks like the docker version or the connection to the registered Docker Registry. This can be blocking if you are working behind a company proxy, so it&#39;s possible to disable those checks by creating the file &lt;em&gt;testcontainers.properties&lt;/em&gt; in the tests resources directory with this content:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;check&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;disable&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At last, we can stop our container with the method stop.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;container&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will stop the container and also remove the attached volume. This is great because it prevents having dangling volumes.&lt;/p&gt;
&lt;p&gt;##During Tests
One great strength of Testcontainers is its integration with JUnit framework. In fact, GenericContainer objects are &lt;a href=&#34;https://github.com/junit-team/junit4/wiki/rules&#34;&gt;JUnit rules&lt;/a&gt;. It means that their lifecycle is directly bound to the test lifecycle. Thereby, by using the &lt;code&gt;@Rule&lt;/code&gt; or &lt;code&gt;@ClassRule&lt;/code&gt; JUnit annotations, our containers will be initialized before the test start-up and stopped at the end of the tests execution.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@ClassRule&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; GenericContainer redis &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; GenericContainer&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;redis:3.0.2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
               &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;withExposedPorts&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;6379&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nevertheless, it means that Testcontainers will come with a JUnit 4 dependency and it can be annoying if your tests run with &lt;a href=&#34;https://junit.org/junit5/docs/current/user-guide/#overview-what-is-junit-5&#34;&gt;JUnit 5&lt;/a&gt;. Indeed, JUnit has replaced the Rule concept with &lt;a href=&#34;https://junit.org/junit5/docs/current/user-guide/#extensions&#34;&gt;Extension&lt;/a&gt;. Since the version 1.10.0 released on November 2018, Testcontainers &lt;a href=&#34;https://www.testcontainers.org/usage.html#junit&#34;&gt;supports now JUnit 5&lt;/a&gt; and it&#39;s possible to use extensions with the help of &lt;code&gt;@Testcontainers&lt;/code&gt;and &lt;code&gt;@Container&lt;/code&gt; annotations from the dedicated library junit-jupiter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;testcontainers&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;junit-jupiter&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;1.10.2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;##Preconfigured container
Like Docker, Testcontainers ecosystem is very rich. You can find preconfigured containers like MySql, PostgreSQL, Oracle database, Kafka, Neo4j, Elasticsearch, etc.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Rule&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; KafkaContainer kafka &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; KafkaContainer&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can browse the list directly from &lt;a href=&#34;https://search.maven.org/search?q=g:org.testcontainers&#34;&gt;maven repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;#A concrete case
Let&#39;s see a concrete example of using Testscontainers with the &lt;a href=&#34;https://github.com/spring-projects/spring-petclinic&#34;&gt;Spring PetClinic application&lt;/a&gt;. It&#39;s a demonstrating project based on several Spring components like Spring Boot, Spring MVC and Spring JPA. This application aims at managing a pet clinic with pets, pet owners and vets.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://thepracticaldev.s3.amazonaws.com/i/6dmhjw1jun0azij8d3zk.png&#34; alt=&#34;application petclinic&#34;&gt;&lt;/p&gt;
&lt;p&gt;The controller layer exposes HTTP endpoints to create and read entities. Then, the persistence layer communicates with a relational database. The application can be configured to communicate with a HSQLDB or a MySql database.&lt;/p&gt;
&lt;p&gt;The persistence layer is tested with integration tests and those uses an in-memory HSQL database while the persistence layer itself uses a MySql database.&lt;/p&gt;
&lt;p&gt;##Requirements
First, we have to install Docker on the machine which is going to execute tests. Then, we need to add the Testcontainers dependency to the project. In this case, we simply add the following to the &lt;em&gt;pom.xml&lt;/em&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;org.testcontainers&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;testcontainers&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;1.10.2&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;scope&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;test&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;database-configuration&#34;&gt;Database configuration&lt;/h2&gt;
&lt;p&gt;The default database configuration is done in the &lt;em&gt;application.properties&lt;/em&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;database=hsqldb
spring.datasource.schema=classpath*:db/${database}/schema.sql
spring.datasource.data=classpath*:db/${database}/data.sql
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As we can see, this is an in-memory HSQLDB database initialized with a schema from the &lt;em&gt;schema.sql&lt;/em&gt; file. Then, the database is populated with the &lt;em&gt;data.sql&lt;/em&gt; file. This is the default project configuration.
We need to create &lt;em&gt;application-test.properties&lt;/em&gt; file to configure a connection to a MySql database.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;spring.datasource.url=jdbc:mysql://localhost/petclinic
spring.datasource.username=petclinic
spring.datasource.password=petclinic
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, let&#39;s take the test class &lt;code&gt;ClinicServiceTests.java&lt;/code&gt;. This class contains all integration tests for the persistence layer. First of all, we need to change Spring test configuration to ensure that the tests will use our database connection.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/vgallet/cfd2f56c7f67de74bcf50e3355239844.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;The &lt;code&gt;@TestPropertySource&lt;/code&gt; annotation enables to load our file &lt;em&gt;application-test.properties&lt;/em&gt; and &lt;code&gt;@AutoConfigureTestDatabase&lt;/code&gt; with the &lt;code&gt;NONE&lt;/code&gt; value prevents Spring from creating an embedded database.&lt;/p&gt;
&lt;h2 id=&#34;mysql-container&#34;&gt;MySql container&lt;/h2&gt;
&lt;p&gt;Let&#39;s create a MySql database that matches requirements from our tests. In this instance, we use the ability from Testcontainers to create a Docker image from a Dockerfile created on the fly. As a first step, we have pulled a &lt;a href=&#34;https://hub.docker.com/_/mysql/&#34;&gt;MySql official image&lt;/a&gt; from Docker Hub:&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/vgallet/640514a92f33bf1ead299bfc8d52a5fb.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Now, we have to create our database and the connection&#39;s user. This is done by using environment variables from the Docker image.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/vgallet/9a052003114ce49ff71d2eb8c18450b1.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Next, we have to create a database schema and populate the database. From the image documentation, the directory &lt;em&gt;/docker-entrypoint-initdb.d&lt;/em&gt; is scanned at startup and all files with &lt;em&gt;.sh&lt;/em&gt;, &lt;em&gt;.sql&lt;/em&gt; et &lt;em&gt;.sql.gz&lt;/em&gt; extension are executed. So, we just have to put our files &lt;em&gt;schema.sql&lt;/em&gt; and &lt;em&gt;data.sql&lt;/em&gt; in this directory.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/vgallet/98292e5c40aa4ee4d174a43ce3c3d6f1.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;By using &lt;code&gt;withClasspathResourceMapping&lt;/code&gt;, the files &lt;em&gt;schema.sql&lt;/em&gt; and &lt;em&gt;data.sql&lt;/em&gt; are put on the classpath into the container as a volume. Then, we can access it into our Dockerfile construction.
One last thing, we have to expose the default MySql port: 3306.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/vgallet/d1d115804beef106c0e8e99f2d7aa36f.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Unfortunately, we can&#39;t directly set port bindings with the method &lt;em&gt;setPortBindings&lt;/em&gt;. We have to customize the container on creation with the method &lt;code&gt;withCreateContainerCmdModifier&lt;/code&gt;. Finally, we are waiting for the listening port to ensure that our container is up.
Voilà! With few lines of code, we have easily set a MySql database for our tests without having to manage the container lifecycle. The &lt;code&gt;@ClassRule&lt;/code&gt; annotation makes our container starting once for all the tests. You might be wondering: have we extend the test execution time? In fact, it only takes 907 ms with a Docker container against 860 ms with a HSQLDB in-memory database. The source code shown in this section is available on &lt;a href=&#34;https://github.com/vgallet/spring-petclinic/tree/testcontainers&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A big thanks to &lt;a href=&#34;https://www.linkedin.com/in/sonyth-huber-57854424/&#34;&gt;Sonyth&lt;/a&gt;, &lt;a href=&#34;https://www.linkedin.com/in/s%C3%A9bastien-bernard-841598176/&#34;&gt;Sebastien&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/Ouelcum&#34;&gt;Laurent&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/_louidji&#34;&gt;Louis&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/ncuillery&#34;&gt;Nicolas&lt;/a&gt; for their time and proofreading.&lt;/em&gt;&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Builder Pattern, a first step to DSL</title>
       <link>https://vgallet.github.io/posts/builder-pattern/</link>
       <pubDate>Sat, 30 Nov 2019 20:06:38 +0100</pubDate>
       
       <guid>https://vgallet.github.io/posts/builder-pattern/</guid>
       <description>&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Originally published at &lt;a href=&#34;https://dev.to/vga/builder-pattern-a-first-step-to-dsl-47de&#34;&gt;dev.to&lt;/a&gt; on Dec 5, 2018&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;When you are looking for an explanation of Builder pattern, you will probably find some articles all showing a class dedicated to creating an object. It&#39;s quite simple and we can go deeper with this pattern.&lt;/p&gt;
&lt;p&gt;Let&#39;s start from the beginning with the class &lt;code&gt;Person&lt;/code&gt; below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String firstname&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String lastname&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String nickname&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String email&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String gender&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String country&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String city&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String firstname&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String lastname&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String nickname&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String email&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String gender&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String country&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String city&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;firstname&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; firstname&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;lastname&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; lastname&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nickname&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nickname&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;email&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; email&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gender&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gender&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;country&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; country&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;city&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; city&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we can see from this piece of code, there will be problems when creating a new Person object:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;constructor that&#39;s too big,&lt;/li&gt;
&lt;li&gt;constructor parameters have all the same type. We have to remember the right order of each parameter when using it. In fact, we are façing a common code smell: &lt;strong&gt;primitive obsession&lt;/strong&gt;. You can take a look at this &lt;a href=&#34;https://refactoring.guru/smells/primitive-obsession&#34;&gt;article&lt;/a&gt; which explains how to recognize and deal with them.&lt;/li&gt;
&lt;li&gt;How can we set up constraints? It can be difficult to check nullity or to ensure consistency between fields.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So to deal with some of these points, we can add several constructors. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String firstname&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String lastname&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;firstname&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; lastname&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String firstname&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String lastname&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String nickname&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;firstname&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; lastname&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nickname&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String firstname&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String lastname&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String nickname&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String email&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;firstname&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; lastname&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; nickname&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; email&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By adding different constructors to our class Person, the result is that &lt;strong&gt;building responsibility is delegated to the client&lt;/strong&gt;. The developer who wants to create an object Person has to know which constructor to use and why. Moreover, the resulting code is difficult to read and to understand :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Person john &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;john&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;smith&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;john&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this simple piece of code, it&#39;s difficult to know where the first name, last name, and nickname parameters are. We have to go through the source code to check on which fields will be initialized. An handy solution is to create a builder class to address this readability problem.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PersonBuilder&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; Person person&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PersonBuilder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       person &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; PersonBuilder &lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonBuilder&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PersonBuilder &lt;span style=&#34;color:#a6e22e&#34;&gt;withFirstname&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String firstname&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;firstname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
           &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;firstname must be not null&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
       person&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setFirstname&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;firstname&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; PersonBuilder &lt;span style=&#34;color:#a6e22e&#34;&gt;withLastname&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String lastname&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;lastname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
           &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lastname must be not null&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
       person&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setLastname&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;lastname&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
   
  &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Person &lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; person&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, we can use it like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Person john &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PersonBuilder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;withFirstname&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;john&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;withLastname&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;smith&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Great! This solution has the benefit of explicit arguments. We can easily understand what person&#39;s first name is. In addition, it was easy to add a not-null constraint for each building method. Furthermore, as each method returns the instance of PersonBuilder, it provides us a pseudo &lt;a href=&#34;https://en.wikipedia.org/wiki/Fluent_interface&#34;&gt;DomainSpecificLanguage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, unlike a constructor, this builder is not self-explanatory and can be used incorrectly. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Person john &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PersonBuilder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This simplest case reveals a lack of guidance. In fact, it&#39;s possible to guide the developer during the creation phase.
For example, let&#39;s say we want to divide the creation process into four steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the developer has to set the first name first,&lt;/li&gt;
&lt;li&gt;then he can set the last name,&lt;/li&gt;
&lt;li&gt;then he can set the email&lt;/li&gt;
&lt;li&gt;and finally he can build a Person object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To do this, we have to create four interfaces :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StepFirstnameBuilder&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

   StepLastnamePersonBuilder &lt;span style=&#34;color:#a6e22e&#34;&gt;withFirstname&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String firstname&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This first step enables the developer to set the first name field and then to use the second step interface &lt;code&gt;StepLastnamePersonBuilder&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StepLastnamePersonBuilder&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

   StepEmailPersonBuilder &lt;span style=&#34;color:#a6e22e&#34;&gt;withLastname&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String lastname&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StepEmailPersonBuilder&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

   FinalStepPersonBuilder &lt;span style=&#34;color:#a6e22e&#34;&gt;withEmail&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String email&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FinalStepPersonBuilder&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

   Person &lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, after setting all mandatory fields we can access the &lt;code&gt;build&lt;/code&gt; method.
That&#39;s it! Now we can modify &lt;code&gt;PersonBuilder&lt;/code&gt; class to implement our four steps.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PersonBuilder&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; StepFirstnameBuilder&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 
StepLastnamePersonBuilder&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
StepEmailPersonBuilder&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
FinalStepPersonBuilder &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;


   &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; Person person&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PersonBuilder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       person &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Person&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; StepFirstnameBuilder &lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PersonBuilder&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; StepLastnamePersonBuilder &lt;span style=&#34;color:#a6e22e&#34;&gt;withFirstname&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String firstname&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;firstname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
           &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;firstname must be not null&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
       person&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setFirstname&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;firstname&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; StepEmailPersonBuilder &lt;span style=&#34;color:#a6e22e&#34;&gt;withLastname&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String lastname&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;lastname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
           &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lastname must be not null&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
       person&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setLastname&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;lastname&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; FinalStepPersonBuilder &lt;span style=&#34;color:#a6e22e&#34;&gt;withEmail&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String email&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       person&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setEmail&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;email&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
   
   &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Person &lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; person&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, let&#39;s use it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Person john &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PersonBuilder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// -&amp;gt; returrns an instance of StepFirstnameBuilder
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;withFirstname&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;john&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// -&amp;gt; returns an instance of StepLastnamePersonBuilder
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;withLastname&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;smith&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// -&amp;gt; returns an instance of StepEmailPersonBuilder
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;withEmail&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;john@smith.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// -&amp;gt; returns an instance of FinalStepPersonBuilder
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By implementing all these steps, we have totally controlled the way a Person object is built. Actually, we have just created a DomainSpecificLanguage. This Builder pattern is a particular case of FluentInterface dedicated to building object and it&#39;s an easy way to express the way an object is built.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A big thanks to &lt;a href=&#34;https://www.linkedin.com/in/sonyth-huber-57854424/&#34;&gt;Sonyth&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/TsubaR00ck&#34;&gt;Mickael&lt;/a&gt; for their time and proofreading.&lt;/em&gt;&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Migration from Junit 4 to Junit 5</title>
       <link>https://vgallet.github.io/posts/migration-junit4-junit5/</link>
       <pubDate>Sat, 30 Nov 2019 19:47:12 +0100</pubDate>
       
       <guid>https://vgallet.github.io/posts/migration-junit4-junit5/</guid>
       <description>&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Originally published at &lt;a href=&#34;https://dev.to/vga/migration-from-junit-4-to-junit-5-19d6/&#34;&gt;dev.to&lt;/a&gt; on April 23, 2018&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;While working on my current project, I got some time to migrate from &lt;a href=&#34;https://junit.org/junit4/&#34;&gt;JUnit 4&lt;/a&gt; to &lt;a href=&#34;https://junit.org/junit5/&#34;&gt;JUnit 5&lt;/a&gt;.
Since JUnit 5 was released in September 2017, it&#39;s the right time to take a look at it.&lt;/p&gt;
&lt;p&gt;My application is a java 8 maven project divided into 7 maven modules and each module has it owns integration and unit tests. However, one of these modules is dedicated to tests. It contains all the test needed dependencies and it&#39;s injected as scope test into others modules.
Our tests dependencies are the most common in a Java project. We use JUnit 4, &lt;a href=&#34;https://joel-costigliola.github.io/assertj/&#34;&gt;AssertJ&lt;/a&gt;, &lt;a href=&#34;http://site.mockito.org/&#34;&gt;Mockito&lt;/a&gt;, &lt;a href=&#34;http://dbunit.sourceforge.net/&#34;&gt;DbUnit&lt;/a&gt; and &lt;a href=&#34;https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html&#34;&gt;Spring Test&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At last, we also have a dedicated project to run end-to-end testings based on &lt;a href=&#34;https://www.seleniumhq.org/&#34;&gt;Selenium&lt;/a&gt;, &lt;a href=&#34;http://fluentLenium.org/&#34;&gt;Fluentlenium&lt;/a&gt; and &lt;a href=&#34;http://jgiven.org/&#34;&gt;JGiven&lt;/a&gt;.
Unfortunately, JGiven does not fully support JUnit 5. It&#39;s currently in an &lt;a href=&#34;http://jgiven.org/userguide/#_junit_5_experimental&#34;&gt;experimental state&lt;/a&gt;, so I haven&#39;t started this migration.&lt;/p&gt;
&lt;h2 id=&#34;dependencies&#34;&gt;Dependencies&lt;/h2&gt;
&lt;p&gt;Let&#39;s start by adding the new JUnit dependencies :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;org.junit.jupiter&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;junit-jupiter-engine&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;${junit.version}&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;org.junit.vintage&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;junit-vintage-engine&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;${junit.version}&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;org.junit.platform&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;junit-platform-launcher&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;${junit.platform.version}&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;org.junit.platform&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;junit-platform-runner&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;${junit.platform.version}&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The important to take note of is the import of &lt;code&gt;junit-vintage-engine&lt;/code&gt;. It provides the ability to run JUnit 4 tests and JUnit 5 tests simultaneously without difficulty.&lt;/p&gt;
&lt;h2 id=&#34;unit-tests&#34;&gt;Unit Tests&lt;/h2&gt;
&lt;p&gt;The next step is to replace all imports of old JUnit annotations by the newest.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.junit.Test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;become&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; org.junit.jupiter.api.Test&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here&#39;s the mapping of each annotation:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;JUnit 4&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Junit 5&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;org.junit.Before&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;org.junit.jupiter.api.BeforeEach&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;org.junit.After&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;org.junit.jupiter.api.After&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;org.junit.BeforeClass&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;org.junit.jupiter.api.BeforeAll&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;org.junit.AfterClass&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;org.junit.jupiter.api.AfterAll&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;org.junit.Ignore&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;org.junit.jupiter.api.Disabled&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As we use AssertJ for all our assertions, I didn&#39;t need to migrate JUnit 4 assertions.&lt;/p&gt;
&lt;h2 id=&#34;rules&#34;&gt;Rules&lt;/h2&gt;
&lt;p&gt;One the biggest change is the removal of the concept of &lt;a href=&#34;http://www.codeaffine.com/2012/09/24/junit-rules/&#34;&gt;rules&lt;/a&gt;, that has been replaced by &lt;a href=&#34;https://junit.org/junit5/docs/current/user-guide/#extensions&#34;&gt;extension model&lt;/a&gt;. The purpose of extension is to extend the behavior of test classes or methods and it replaces JUnit runner and Junit Rules.&lt;/p&gt;
&lt;p&gt;One rule that we all have used is &lt;code&gt;ExpectedException&lt;/code&gt; and it can be easily replaced by JUnit &lt;code&gt;assertThrows&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exceptionTesting&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Throwable exception &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; assertThrows&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalArgumentException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a message&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        assertEquals&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a message&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; exception&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getMessage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Another well-known rule to migrate is &lt;code&gt;TemporaryFolder&lt;/code&gt;. Unfortunately, JUnit 5 does not provide a replacement yet. There is an open &lt;a href=&#34;http://github.com/junit-team/junit5/issues/1247&#34;&gt;issue&lt;/a&gt; in Github.&lt;/p&gt;
&lt;p&gt;So what can we do to make it work?&lt;/p&gt;
&lt;p&gt;First of all, it&#39;s possible to keep tests using those rule in JUnit 4 thanks to &lt;code&gt;junit-vintage-engine&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Another solution is to continue to use JUnit 4 &lt;code&gt;TemporaryFolder&lt;/code&gt; rule by adding the dependency &lt;code&gt;junit-jupiter-migrationsupport&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;org.junit.jupiter&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;junit-jupiter-migrationsupport&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;${junit.version}&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This module enables to run JUnit 5 tests with rules. For example :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@EnableRuleMigrationSupport&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;JUnit4TemporaryFolderTest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Rule&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TemporaryFolder temporaryFolder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TemporaryFolder&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; IOException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        temporaryFolder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newFile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;new_file&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, this feature only supports :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rules that extend &lt;code&gt;org.junit.rules.ExternalResource&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;rules that extend &lt;code&gt;org.junit.rules.Verifier&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;rule &lt;code&gt;ExpectedException&lt;/code&gt;
and it&#39;s currently marked as &lt;a href=&#34;https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4-rule-support&#34;&gt;experimental&lt;/a&gt; so use it at your own risk.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, one solution is to create our own &lt;a href=&#34;https://gist.github.com/vgallet/8b52247c4cc57c6bc96923daff630fc1&#34;&gt;&lt;code&gt;TemporaryFolderExtension&lt;/code&gt;&lt;/a&gt; based on Junit 4 implementation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TemporaryFolderExtension&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; BeforeEachCallback&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; AfterEachCallback &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; File parentFolder&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; File folder&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TemporaryFolderExtension&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TemporaryFolderExtension&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;File parentFolder&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;parentFolder&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; parentFolder&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;afterEach&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ExtensionContext extensionContext&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;folder &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
           recursiveDelete&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;folder&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;beforeEach&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ExtensionContext extensionContext&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; IOException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       folder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; File&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;createTempFile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;junit&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; parentFolder&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       folder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;delete&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       folder&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mkdir&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; File &lt;span style=&#34;color:#a6e22e&#34;&gt;newFile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String fileName&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; IOException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       File file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; File&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;getRoot&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; fileName&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;createNewFile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
           &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IOException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a file with the name \&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; fileName &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;#39; already exists in the test folder&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; File &lt;span style=&#34;color:#a6e22e&#34;&gt;newFolder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String folderName&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       File file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getRoot&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; File&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;file&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; folderName&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mkdir&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;recursiveDelete&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;File file&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       File&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; files &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;listFiles&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;files &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
           &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;File each &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; files&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
               recursiveDelete&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;each&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
           &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
       &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
       file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;delete&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; File &lt;span style=&#34;color:#a6e22e&#34;&gt;getRoot&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;folder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
           &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; IllegalStateException&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;the temporary folder has not yet been created&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; folder&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This implementation does not fully support all extension features like &lt;a href=&#34;https://junit.org/junit5/docs/current/user-guide/#extensions-parameter-resolution&#34;&gt;Parameter Resolution&lt;/a&gt; but at least, it allows us to fully migrate our tests to JUnit 5.
In addition, it&#39;s possible to inject extensions as rule by using &lt;a href=&#34;https://junit.org/junit5/docs/current/user-guide/#extensions-registration-programmatic&#34;&gt;&lt;code&gt;@RegisterExtension&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@RegisterExtension&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; TemporaryFolderExtension temporaryFolder &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; TemporaryFolderExtension&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This annotation enables us to build an extension with parameters and to access is during test execution.&lt;/p&gt;
&lt;h2 id=&#34;custom-rules&#34;&gt;Custom Rules&lt;/h2&gt;
&lt;p&gt;In my case, I had only one custom rule to migrate. Its goal is to create an in-memory SMTP server for asserting sending emails.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SMTPServerRule&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; ExternalResource &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; GreenMail smtpServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String hostname&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; port&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SMTPServerRule&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;25&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SMTPServerRule&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; port&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; port&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SMTPServerRule&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String hostname&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; port&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hostname&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hostname&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; port&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;


   &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;before&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Throwable &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;before&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

       smtpServer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; GreenMail&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ServerSetup&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;port&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; hostname&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;smtp&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       smtpServer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ExpectedMail&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getMessages&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Lists&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newArrayList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;smtpServer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getReceivedMessages&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
           &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;parallel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
           &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mimeMessage &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; ExpectedMail&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;transformMimeMessage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mimeMessage&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;collect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Collectors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;after&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;after&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       smtpServer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To make it work as a JUnit extension, it only needs to implement &lt;code&gt;BeforeEachCallback&lt;/code&gt; and &lt;code&gt;AfterEachCallback&lt;/code&gt; interfaces instead of inheriting from &lt;code&gt;ExternalResource&lt;/code&gt;. The main implementation is still the same.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SMTPServerExtension&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; BeforeEachCallback&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; AfterEachCallback &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; GreenMail smtpServer&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String hostname&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; port&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SMTPServerExtension&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;25&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SMTPServerExtension&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; port&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; port&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SMTPServerExtension&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String hostname&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; port&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;hostname&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hostname&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; port&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;ExpectedMail&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getMessages&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Lists&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newArrayList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;smtpServer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getReceivedMessages&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
           &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;parallel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
           &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mimeMessage &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; ExpectedMail&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;transformMimeMessage&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mimeMessage&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;collect&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Collectors&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;


   &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;afterEach&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ExtensionContext extensionContext&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       smtpServer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

   &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;beforeEach&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ExtensionContext extensionContext&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       smtpServer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; GreenMail&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ServerSetup&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;port&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; hostname&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;smtp&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
       smtpServer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
   &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;integration-tests&#34;&gt;Integration Tests&lt;/h2&gt;
&lt;p&gt;Next, I had to update Spring integration tests and it was quite easy as class &lt;code&gt;SpringExtension&lt;/code&gt; is included in Spring 5.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@RunWith&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SpringJUnit4ClassRunner&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;become&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@ExtendWith&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SpringExtension&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;mockito-tests&#34;&gt;Mockito Tests&lt;/h2&gt;
&lt;p&gt;Let&#39;s continue with tests that use Mockito. Like we have done with Spring integration tests, we have to register an extension :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@RunWith&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;MockitoJUnitRunner&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;become&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@ExtendWith&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;MockitoExtension&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In fact, class &lt;code&gt;MockitoExtension&lt;/code&gt; is not provided by Mockito yet and it will be introduced with Mockito 3.
One solution is the same as &lt;code&gt;TemporaryFolderExtension&lt;/code&gt;&amp;hellip;that is to keep our tests in JUnit 4. However, it&#39;s also possible to create our own extension and so Junit team give one implementation of &lt;a href=&#34;https://github.com/junit-team/junit5-samples/blob/r5.1.1/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java&#34;&gt;&lt;code&gt;MockitoExtension&lt;/code&gt;&lt;/a&gt; in its samples.
I decided to import it into my project to complete my migration.&lt;/p&gt;
&lt;p&gt;##Remove JUnit 4&lt;/p&gt;
&lt;p&gt;Then, to ensure all my tests run under JUnit 5, I checked if there is any JUnit 4 dependency by executing :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mvn dependency:tree

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And so, I had to exclude some of them :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;exclusions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;exclusion&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;junit&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;junit&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/exclusions&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;org.dbunit&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;dbunit&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;${dbunit.version}&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;exclusions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;exclusion&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;junit&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;junit&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/exclusions&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;maven&#34;&gt;Maven&lt;/h2&gt;
&lt;p&gt;Last but not least, I needed to update the maven surefire plugin to make it works with JUnit 5.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;        The Surefire Plugin is used during the test phase of the build lifecycle to execute the unit tests of an application.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;plugin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;maven-surefire-plugin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;${maven-surefire-plugin.version}&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependencies&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;org.junit.platform&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;junit-platform-surefire-provider&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;1.1.1&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;org.junit.jupiter&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;junit-jupiter-engine&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;${junit.version}&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Be careful with the version of your maven surefire plugin as the &lt;code&gt;2.20&lt;/code&gt; has a &lt;a href=&#34;https://github.com/junit-team/junit5/issues/809&#34;&gt;memory leak&lt;/a&gt;. &lt;a href=&#34;https://junit.org/junit5/docs/current/user-guide/#running-tests-build-maven&#34;&gt;JUnit documentation&lt;/a&gt; suggests the version &lt;code&gt;2.21&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This migration was really easy, but even so, JUnit 5 is totally different from JUnit 4. In the end, I was able to remove the import of &lt;code&gt;junit-vintage-engine&lt;/code&gt; as I don&#39;t have Junit 4 test anymore. I only regret the fact that I had to create my own temporary folder extension and Mockito extension.
Finally, it&#39;s possible to get more help with your migration by consulting &lt;a href=&#34;https://github.com/junit-team/junit5-samples&#34;&gt;Junit5-samples&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A big thanks to &lt;a href=&#34;https://www.linkedin.com/in/sonyth-huber-57854424/&#34;&gt;Sonyth&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/TsubaR00ck&#34;&gt;Mickael&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/7ouss3m&#34;&gt;Houssem&lt;/a&gt; for their time and proofreading.&lt;/p&gt;
</description>
     </item>
   
 </channel>
</rss>
